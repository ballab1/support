#!/bin/bash

##############################################################################################
function build.allContainers()
{
    local -a modules=( "$@" )

    # Use the Unofficial Bash Strict Mode
    set -o errexit
    set -o nounset
    set -o pipefail
    IFS=$'\n\t'

    set +o verbose
    set +o xtrace

    local start=$(date +%s)
    [ -f ~/bin/trap.bashlib ] && source ~/bin/trap.bashlib

    export CFG_GITHUB_EMAIL=''
    export CFG_GITHUB_HUBOT_TOKEN=''
    export CFG_GITHUB_JENKINS_EMAIL=''
    export CFG_GITHUB_JENKINS_NAME=''
    export CFG_GITHUB_JENKINS_TOKEN=''
    export CFG_GITHUB_JENKINS_USER=''
    export CFG_GITHUB_NAME=''
    export CFG_GITHUB_TOKEN=''
    export CFG_GITHUB_USER=''
    export CFG_PASS=''
    export CFG_SLACK_HUBOT_TOKEN=''
    export CFG_USER=''
    export DOCKER_REGISTRY=ubuntu-s2:5000/

    for dir in "${modules[@]}"; do
        pushd "$dir" >/dev/null
        unset CBF_VERSION
        [ "$dir" = base_container ] && export CBF_VERSION=v3.0
        build.updateContainer
        popd >/dev/null
    done

    local finish=$(date +%s)
    local -i elapsed=$(( finish - start ))

    echo ''
    echo ''
    TZ='America/New_York' date
    printf "Time elapsed: %02d:%02d:%02d\n"  $((elapsed / 3600)) $((elapsed % 3600 / 60)) $((elapsed % 60))
}

##############################################################################################
function build.calculateFingerprint()
{
    local -r image=${1:?}
    local -r config=${2:?}

    # get the following
    #  - git tree hash
    #  - container digest of layer that we are building on top of
    # all arguements (ARG) to 'docker build'
    local -a dependents
    mapfile -t dependents < <(git ls-tree HEAD -- . | awk '{print $3}')
    dependents+=( $(docker inspect "$image" | jq '.[].RootFS.Layers[]?')
                  "$(eval echo $(jq '.build.args?'<<< $config))"
                 )
    (sha256sum | cut -d' ' -f1) <<< "${dependents[*]}"
}

##############################################################################################
function build.imageExists()
{
    local -r fingerPrint=${1:?}

    local cmd="curl --silent --unix-socket /var/run/docker.sock http://localhost/images/json?all='true' | jq '.[] | select(.Labels.container.fingerprint == \"$fingerPrint\")'"
    eval $cmd
}

##############################################################################################
function build.jsonCompose()
{
    local jsonConfig=$(python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < docker-compose.yml | jq '.services?')
    if [ "${jsonConfig:-}" ]; then
        local -r service="$(eval echo $(jq 'keys[0]?' <<< "$jsonConfig"))"
       [ -z "${service:-}" ] || jq $(eval echo "'.\"$service\"?'") <<< "$jsonConfig"
    fi
}

##############################################################################################
function build.updateContainer()
{
    local config=$(build.jsonCompose)
    local -r actualImage="$(eval echo $(jq '.image?' <<< $config))"

    
    export CONTAINER_TAG="$(build.calculateFingerprint "$actualImage" "$config")"

    # check if there is a local image with the correct fingerprint
    if [ $(build.imageExists "$CONTAINER_TAG") ]; then
        echo 'image has not changed.'
        return
    fi

    local -r latestImage="${actualImage%:*}:latest"

    echo building $latestImage
    # check if there is an image in the registry with the correct fingerprint
    if docker pull "$actualImage" 2>/dev/null; then
        #downloaded image from registry
        docker rmi "$latestImage"
        docker tag "$actualImage" "$latestIage"
        docker rmi "$actualImage"
        return
    fi

    # setup environment for 'docker-compose build'
    export CONTAINER_FINGERPRINT="$CONTAINER_TAG"
    export CONTAINER_GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    export CONTAINER_GIT_COMMIT="$(git rev-parse HEAD)"
    export CONTAINER_GIT_URL="$(git remote get-url origin)"
    export CONTAINER_ORIGIN="$version"

    # rebuild container because no container exists with the correct fingerprint
    docker-compose build
    if [ "$CONTAINER_GIT_BRANCH" = 'master' ] && [[ "$(git describe --tags --dirty)" != *dirty ]]; then
        docker push "$actualImage"
        docker push "$latestImage"
    fi
    docker rmi "$latestImage"
    docker tag "$actualImage" "$latestImage"
    docker rmi "$actualImage"
}
