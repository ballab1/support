#!/bin/bash

#----------------------------------------------------------------------------------------------
function my.usage()
{
    local -i exit_status=${1:-1}
    local -r progname="$( basename "${BASH_SOURCE[0]}" )"

    cat >&2 << EOF
Usage:
    $progname [ -h|--help ]
              | [ --clean ]
              | [ --down ]
              | [ --init ]
              | [ --latest ]
              | [ --promote <branch> ]

    Common options:
        -h --help              Display a basic set of usage instructions
        -c --clean             0:do not clean environment
                               1:clean environment before build (default)
        -d --down              stop services defined by 'docker-compose.yml'
        -i --init              only initialize the environment
        -l --latest            update to latest versions of images rather than using those defined in docker-compose.yml
        -p --promote <branch>  promote images in docker repo, from current <branch> to target <branch>
                               this retags the image with the target <branch>, 
                                   on protected branches {eg: master or integration } the ':latest' tag is used
                               after a pull request has completed the new images should be pushed to the registry.

EOF
    exit "$exit_status"
}

#----------------------------------------------------------------------------------------------
function my.cmdLineArgs()
{
    local base="${1:?}"
    shift
    local usage='my.usage'

    # Parse command-line options into above variable
    local -r longOpts='help,Help,HELP,clean,down,init,latest,promote:'
    local -r shortOpts='Hhcdilp:'
    local -r progname="$( basename "${BASH_SOURCE[0]}" )"
    local -r options=$(getopt --longoptions "$longOpts" --options "$shortOpts" --name "$progname" -- "$@") || "$usage" $?
    eval set -- "$options"

    local -A opts=()
    [ "$base" ] && opts['base']="$base" 
    while true; do
        case "${1:-}" in
            -h|--h|--help|-help)  "$usage" 1;;
            -H|--H|--HELP|-HELP)  "$usage" 1;;
            --Help|-Help)         "$usage" 1;;
            -c|--c|--clean)       opts['clean']=1; shift;;
            -d|--d|--down)        opts['down']=1; shift;;
            -i|--i|--init)        opts['init']=1; shift;;
            -l|--l|--latest)      opts['latest']=1; shift;;
            -p|--p|--promote)     opts['promote']=$2; shift 2;;
            --)                   shift; break;;
        esac
    done
    
    [ $# -eq 0 ] || term.log 'Ignoring extra arguments' 'warn'
    appenv.results
}

#----------------------------------------------------------------------------------------------

declare -i status
declare -a args
declare fn=deploy.main

declare loader="$(dirname "${BASH_SOURCE[0]}")/libs/appenv.bashlib"
if [ ! -e "$loader" ]; then
    echo 'Unable to load libraries'
    exit 1
fi
source "$loader"
appenv.loader "$fn"

args=( $( my.cmdLineArgs "$TOP" "$@" ) ) && status=$? || status=$?
[ $status -eq 0 ] && "$fn" "${args[@]}" 
