#!/bin/bash

#----------------------------------------------------------------------------------------------
function deleteImages.usage()
{
    local -i exit_status=${1:-1}

    cat >&2 << EOF
Usage:
    $progname [ -h|--help ] <repository> | <image> <image>

    Common options:
        -h --help              Display a basic set of usage instructions

    delete specific images, or all images within one or more docker registry repositories
    image and/or repo name should not include a registry reference

EOF
    exit "$exit_status"
}

#----------------------------------------------------------------------------------------------
function deleteImages.cmdLineArgs()
{
    local usage='deleteImages.usage'

    # Parse command-line options into above variable
    local -r progname="$( basename "${BASH_SOURCE[0]}" )"
    local -r options=$(getopt --longoptions "help,Help,HELP" --options "Hh" --name "$progname" -- "$@") || "$usage" $?
    eval set -- "$options"

    local -A opts=()
    while true; do
        case "${1:-}" in
            -h|--h|--help|-help)  "$usage" 1;;
            -H|--H|--HELP|-HELP)  "$usage" 1;;
            --Help|-Help)         "$usage" 1;;
            --)                 shift; break;;
        esac
    done
    
    appenv.results "$@"
}

#----------------------------------------------------------------------------------------------
function deleteImages.main()
{
    local -A opts
    eval opts=( $1 )
    readonly opts
    shift
    local -ra ids=( "$@" )

    [ "${#ids[*]}" -gt 0 ] || return 0

    local id name tag digest
    local -A tags
    for id in "${ids[@]}"; do
        if [[ "$id" = *:* ]]; then
            name="${id%:*}"
            tag="${id##*:}"
            [ "${name:-}" ] && [ "${tag:-}" ] || trap.die "Invalid $id specified"

            if [ "${tag:0:7}" = 'sha256:' ]; then
                registry.deleteImage "$name" "$tag"
            else
                digest="$(registry.digest "$name" "$tag")"
                [ -z "$digest" ] || registry.deleteImage "$name" "$digest"
            fi

        else
            eval tags=( $(registry.tags "$id") )
            [ "${#tags[*]}" -gt 0 ] || continue
            for digest in $(printf '%s\n' "${tags[@]}" | sort -u); do
                registry.deleteImage "$id" "$digest"
            done
        fi
    done
}

#----------------------------------------------------------------------------------------------

declare -i status
declare -a args
declare fn=deleteImages.main

declare loader="$(dirname "${BASH_SOURCE[0]}")/libs/appenv.bashlib"
if [ ! -e "$loader" ]; then
    echo 'Unable to load libraries'
    exit 1
fi
source "$loader"
appenv.loader "$fn"
args=( $( deleteImages.cmdLineArgs "$@" ) ) && status=$? || status=$?
[ $status -eq 0 ] && deleteImages.main ${args[@]}
