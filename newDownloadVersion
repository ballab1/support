#!/bin/bash

#----------------------------------------------------------------------------------------------
function my.usage()
{
    local -i exit_status=${1:-1}

    cat >&2 << EOF
Usage:
    $progname [ -h | --help ] 
              [ -d | --download <download> ]
              [ -p | --project <project> }
              <version>

    Common options:
        -h --help                  Display a basic set of usage instructions
        -d --download <download>   Name of file in 'build/actions_folder/04.downloads' to use.
                                   May be ommitted when project contains only one download  
        -p --project <project>     Project directory. If not specified, defaults to current directory 
        version                    version to add to download file

    update a <project>'s <download> specifier with <version>
    actions performed:
        find file in <project>/build/action_folders/04.downloads
        read file to determine download URL
        download from URL and calculate sha256
        insert new sha256 into file
        update versions files
        upload to Artifactory

EOF
    exit "$exit_status"
}

#----------------------------------------------------------------------------------------------
function my.cmdLineArgs()
{
    local base="${1:?}"
    shift
    local usage='my.usage'

    # Parse command-line options into above variable
    local -r progname="$( basename "${BASH_SOURCE[0]}" )"
    local -r options=$(getopt --longoptions "help,Help,HELP" --options "Hh" --name "$progname" -- "$@") || "$usage" $?
    eval set -- "$options"

    local -A opts=()
    [ "$base" ] && opts['base']="$base" 
    while true; do
        case "${1:-}" in
            -h|--h|--help|-help)  "$usage" 1;;
            -H|--H|--HELP|-HELP)  "$usage" 1;;
            --Help|-Help)         "$usage" 1;;
            --)                   shift; break;;
        esac
    done
    
    local val
    if [ ${#opts[*]} -gt 0 ]; then
        local -i i=0
        for val in "${!opts[@]}"; do
            [ $(( i++ )) -gt 0 ] && echo -n ' '
            printf '['\''%s'\'']='\''%s'\' "$val" "${opts[$val]}"
        done
    fi
    echo
    if [ $# -gt 0 ]; then
        for val in "$@"; do
            echo "$val"
        done
    fi
}

#----------------------------------------------------------------------------------------------

declare -i status
declare -a args
declare fn=build.wrapper

source "$(dirname "${BASH_SOURCE[0]}")/libs/appenv.bashlib"
appenv.loader "$fn"

args=$( my.cmdLineArgs "$@" ) && status=$? || status=$?

[ $status -eq 0 ] || exit 1
[ "${#args[*]}" -ne 2 ] && echo 'invalid arguements specified' && exit 1

"$fn" "${args[@]}" 