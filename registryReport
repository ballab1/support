#!/bin/bash

#----------------------------------------------------------------------------------------------
function my.usage()
{
    local -i exit_status=${1:-1}

    cat >&2 << EOF
Usage:
    $progname [ -h|--help ] | [ --output <filename> ]  <repository> | <repository> | <repository>

    Common options:
        -h --help                 Display a basic set of usage instructions
        -o --output <filename>    name of file to output

    Report the contents of the name docker repository from the registry, if no repositories are name, all are reported
    The name of the docker registry should not be included in the repository name.

EOF     exit "$exit_status"
}

#----------------------------------------------------------------------------------------------
function my.cmdLineArgs()
{
    local usage='my.usage'

    # Parse command-line options into above variable
    local -r progname="$( basename "${BASH_SOURCE[0]}" )"
    local -r options=$(getopt --longoptions "help,Help,HELP,output:" --options "Hho:" --name "$progname" -- "$@") || "$usage" $?
    eval set -- "$options"

    local -A opts=()
    while true; do
        case "${1:-}" in
            -h|--h|--help|-help)  "$usage" 1;;
            -H|--H|--HELP|-HELP)  "$usage" 1;;
            --Help|-Help)         "$usage" 1;;
            -o|--o|--output)      opts['output']="$2"; shift 2;;
            --)                 shift; break;;
        esac
    done
    
    local val
    if [ ${#opts[*]} -gt 0 ]; then
        local -i i=0
        for val in "${!opts[@]}"; do
            [ $(( i++ )) -gt 0 ] && echo -n ' '
            printf '['\''%s'\'']='\''%s'\' "$val" "${opts[$val]}"
        done
    fi
    echo
    if [ $# -gt 0 ]; then
        for val in "$@"; do
            echo "$val"
        done
    fi
}

#----------------------------------------------------------------------------------------------
function formatTextReport()
{
    declare -r TOOLS="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )" 

    docker run --rm \
               --volume "$TOOLS":/home/groovy/scripts \
               --environment "JSON=registryReport.json" \
               --workdir /home/groovy/scripts \
               groovy:2.6-jre-alpine \
               groovy registryReport.groovy  
}

#----------------------------------------------------------------------------------------------

declare -i status
declare -a args
declare fn=registry.reportCatalog

declare loader="$(dirname "${BASH_SOURCE[0]}")/libs/appenv.bashlib"
if [ ! -e "$loader" ]; then
    echo 'Unable to load libraries'
    exit 1
fi
source "$loader"
appenv.loader "$fn"
args=( $( my.cmdLineArgs "$@" ) ) && status=$? || status=$?
[ $status -eq 0 ] && "$fn" ${args[@]}
