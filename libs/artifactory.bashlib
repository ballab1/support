#!/bin/bash

#----------------------------------------------------------------------------------------------
#
# DO NOT ADD "IN-LINE" code to this file. Only functions should be included.
#
#  module:  bashlib/artifactory.sh
#  purpose: general 'artifactory' scripts: originally in ${TOP}/devops-functions.sh
#
#  bulk of the functions in this library were extracted from devops.bashlib (where they had no namespace)
#  modifications to use 'single source of truth' for Artifactory credientials, rather than accessing them from environment
#
#----------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------
function artifactory.propFile()
{
    echo "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/properties/$(basename "${BASH_SOURCE[0]%.*}").properties"
}
export -f artifactory.propFile

export ARTIFACTORY_PROPERTIES_FILE="${ARTIFACTORY_PROPERTIES_FILE:=$(artifactory.propFile)}"

#----------------------------------------------------------------------------------------------
function artifactory.appendIbids()
{
    local path=${1:?"ERROR: No Path provided to ${FUNCNAME[0]}()!"}
    local prop=${2:?"ERROR: No property provided to ${FUNCNAME[0]}()!"}
    local val=${3:?"ERROR: no value provided to property $2 in  ${FUNCNAME[0]}()!"}

    # This gets all the ibids that are already set on the cyc_core package and appends the new Ibid to it
    local -a ibidProps=$(artifactory.ibidProperty "$path")

    local finalVal="$val"
    for i in "${ibidProps[@]}"; do
        finalVal="$(echo "$i" | sed 's/ /,/g' | tr -d '"'),$finalVal"
    done

    local url="$path?properties=$prop=$finalVal"
    artifactory.PUT "$url"
}
export -f artifactory.appendIbids

#----------------------------------------------------------------------------------------------
function artifactory.artifactPath()
{
    local path=${1:?"ERROR: No Path provided to ${FUNCNAME[0]}()!"}
    local artifactName=${2:?"ERROR: No Artifact provided to ${FUNCNAME[0]}()!"}

    local url="$path/api/search/artifact?name=$artifactName"
    local urlWithRepo="$url&repos=${DEVOPS_REPO}"

    # Performing the first search using the urlWithRepo
    local jsonString=$(artifactory.GET --silent "$urlWithRepo")

    local artifact_path=$(echo "$jsonString" | jq '.results.[].uri' | tr -d '"' )

    if [ -z "$artifact_path" ]; then

        # Performing the search with a search in all repos
        jsonString=$(artifactory.GET --silent "$url")

        artifact_path=$(echo "$jsonString" | jq '.results.[].uri' | tr -d '"' )

        # Analyzing for multiple value and sending the first one
        local -a artifact_part_array
        IFS=' ' read -r -a artifact_part_array <<< "$artifact_path"
        artifact_path="${artifact_part_array[0]}"
    fi

    echo "$artifact_path"
}
export -f artifactory.artifactPath

#----------------------------------------------------------------------------------------------
function artifactory.buildArtifacts()
{
    local artifacts=$(artifactory.propertySearch "jenkins.ibid" "$IBID")
    local -a locationsList
    mapfile -t locationsList < <(jq .results[][] <<< "$artifacts" | tr -d '"' | sort  | sed -e 's#api/storage/##g')

    for artifactLocation in "${locationsList[@]}"
    do
        local artifactId="$(awk -F / '{print $(NF-2)}' <<< "$artifactLocation")"
        local checkDupNum="$(sed 's/\s/\n/g' <<< "${locationsList[*]}" | awk -F / '{print $(NF-2)}' | grep -c "^$artifactId$")"

        if [[ $checkDupNum -gt 1 ]];then
            local fileName=$(awk -F / '{print $(NF)}' <<< "$artifactLocation")
            local version=$(awk -F / '{print $(NF-1)}' <<< "$artifactLocation")
            local filesuffix=${fileName##*.}
            local fileprefix=${fileName%.*}
            local newfileprefix=$(sed "s/-${version}//" <<< "$fileprefix")
            artifactId="${newfileprefix}-${filesuffix}"
        fi
        term.log "artifactory.buildArtifacts ibid update build artifact: $artifactLocation"
        term.log "ibid.update_build_artifacts $artifactId $artifactLocation"
        ibid.update_build_artifacts "$artifactId" "$artifactLocation"
    done
}
export -f artifactory.buildArtifacts

#----------------------------------------------------------------------------------------------
function artifactory.credentials()
{
    if [ "${_ARTIFACTORY_CREDENTIALS:-}" ]; then
        echo "$_ARTIFACTORY_CREDENTIALS"
    else
        local -r user="${1:-${USERNAME:-$USER}}"
        local  password="${!user:-}"
        [ "${password:-}" ] || password="$(lib.getProperty "$user" "$( artifactory.secretsFile )")"

        echo "${_ARTIFACTORY_CREDENTIALS:=${user}:$password}"
    fi
}
export -f artifactory.credentials

#----------------------------------------------------------------------------------------------
function artifactory.DELETE()
{
    artifactory.io --request DELETE --show-error --write-out '\n%{http_code}\n' "$@"
}
export -f artifactory.DELETE

#----------------------------------------------------------------------------------------------
function artifactory.deleteArtifact()
{
    local -r artifact=${1:?"need an artifact"}

    echo "Deleting artifact: $artifact"
    local url="https://$(artifactory.SERVER)/artifactory/$artifact"
    [[ "$artifact" = 'http'* ]] && url="$artifact"
    artifactory.DELETE "$url"
}
export -f artifactory.deleteArtifact

#----------------------------------------------------------------------------------------------
# the following is deleting content directly from Artifactory, rather than through the Docker Registry
# DO NOT USE: this has caused issues
function artifactory.deleteDockerImage()
{
    local -r image=${1:?"need a docker image"}

    echo "Deleting docker: $image"
    local -r url="https://$(artifactory.SERVER)/artifactory/cyclone-dockerv2-local/$image"
    [[ "$image" = 'http'* ]] && url="$image"
    artifactory.DELETE "$url"
}
export -f artifactory.deleteDockerImage

#----------------------------------------------------------------------------------------------
# This function will create a new artifact at $url
# eg:
# artifactoryArtifactDeploy  https://arhost1.usd.lab.emc.com/artifactory/cyclone-dev/com/emc/adapters/1.0.1 random.tar
function artifactory.deployArtifact()
{
    local targetFolder=${1:?"ERROR: no targetFolder provided to ${FUNCNAME[0]}()!"}
    local localFilePath=${2:?"ERROR: no localFilePath provided to ${FUNCNAME[0]}()!"}

    if [ ! -f "$localFilePath" ]; then
        echo "ERROR: local file $localFilePath does not exists!"
        return 1
    fi

    which md5sum || return $?
    which sha1sum || return $?

    local md5Value="$(md5sum "$localFilePath")"
    local md5Value="${md5Value:0:32}"
    local sha1Value="$(sha1sum "$localFilePath")"
    local sha1Value="${sha1Value:0:40}"
    local fileName="$(basename "$localFilePath")"

    local url="$targetFolder/$fileName"

    echo "$md5Value $sha1Value $localFilePath"

    echo "INFO: Uploading $localFilePath to $url"
    artifactory.PUT --header "X-Checksum-Md5: $md5Value" --header "X-Checksum-Sha1: $sha1Value" --upload-file "$localFilePath" "$url"
}
export -f artifactory.deployArtifact

#----------------------------------------------------------------------------------------------
function artifactory.GET()
{
    artifactory.io --request GET "$@"
}
export -f artifactory.GET

#----------------------------------------------------------------------------------------------
function artifactory.ibidProperty()
{
    local path=${1:?"ERROR: No Path provided to ${FUNCNAME[0]}()!"}

    local property="?properties=jenkins.ibid"
    local url="$path${property}"
    local jsonString=$(artifactory.GET --silent "$url")
    jq .'properties."jenkins.ibid"[]' <<< "$jsonString"
}
export -f artifactory.ibidProperty

#----------------------------------------------------------------------------------------------
function artifactory.io()
{
    # replace '--insecure' with '--location-trusted'
    curl --location-trusted \
         --user "$(artifactory.credentials "$(artifactory.USER)")" \
         "$@"
}
export -f artifactory.io

#----------------------------------------------------------------------------------------------
function artifactory.propertiesFile()
{
    echo "${ARTIFACTORY_PROPERTIES_FILE:=$(artifactory.propFile)}"
}
export -f artifactory.propertiesFile

#----------------------------------------------------------------------------------------------
function artifactory.POST()
{
    artifactory.io --request POST "$@"
}
export -f artifactory.POST

#----------------------------------------------------------------------------------------------
# This function will delete the property ($prop) from the artifact located at $path.
# eg:
# artifactoryPropertyDelete https://arhost1.usd.lab.emc.com/artifactory/api/storage/cyclone-dev/com/emc/adapters/1.0-SNAPSHOT/adapters-1.0-20160212.202741-1.pom testProp
function artifactory.propertyDelete()
{
    local path=${1:?"ERROR: no path provided to ${FUNCNAME[0]}()!"}
    local prop=${2:?"ERROR: no property provided to ${FUNCNAME[0]}()!"}

    echo "Deleting property $prop from $path..."

    local url="$path?properties=$prop"
    artifactory.DELETE "$url"
}
export -f artifactory.propertyDelete

#----------------------------------------------------------------------------------------------
# This function will search for artifacts with property ($prop) equal to $val.
# eg:
# artifactoryPropertySearch testProp testValue
function artifactory.propertySearch()
{
    local prop=${1:?"ERROR: no property provided to ${FUNCNAME[0]}()!"}
    local val=${2:?"ERROR: no value provided to ${FUNCNAME[0]}()!"}
    local build_flavor=${3:-$DEVOPS_BUILD_FLAVOR}
    local distribution_type=${4:-$DEVOPS_DISTRIBUTION_TYPE}

    local search_url="$(artifactory.REST_API)/search/prop?$prop=$val&build.flavor=$build_flavor&distribution.type=$distribution_type"
    echo "artifactoryPropertySearch: $search_url" 1>&2
    artifactory.GET "$search_url"
}
export -f artifactory.propertySearch

#----------------------------------------------------------------------------------------------
# This function will set the artifact located at $path to have the given property and value ($prop and $val)
# eg:
# artifactoryPropertySet https://arhost1.usd.lab.emc.com/artifactory/api/storage/cyclone-dev/com/emc/adapters/1.0-SNAPSHOT/adapters-1.0-20160212.202741-1.pom testProp testVal
function artifactory.propertySet()
{
    local path=${1:?"ERROR: no path provided to ${FUNCNAME[0]}()!"}
    local prop=${2:?"ERROR: no property provided to ${FUNCNAME[0]}()!"}
    local val=${3:?"ERROR: no value provided to ${FUNCNAME[0]}()!"}

    echo "Adding property $prop=$val to $path..."
    local url="$path?properties=$prop=$val"
    artifactory.PUT "$url"
}
export -f artifactory.propertySet

#----------------------------------------------------------------------------------------------
function artifactory.PUT()
{
    artifactory.io --request PUT "$@"
}
export -f artifactory.PUT

#----------------------------------------------------------------------------------------------
# This function will retrieve the artifact at $url
# eg:
# artifactoryArtifactRetrieve  https://arhost1.usd.lab.emc.com/artifactory/cyclone-dev/com/emc/adapters/1.0-SNAPSHOT/adapters-1.0-20160212.202741-1.pom
# note that this url must be of the form /artifactory/<repo> as apposed to /artifactory/api/storage/<repo> in order to download the file
function artifactory.retrieveArtifact()
{
    local url=${1:?"ERROR: no url provided to ${FUNCNAME[0]}()!"}
    local filename=$(basename "$url")

    echo "Downloading $url to current dir..."
    artifactory.GET "$url" --output "$filename"
}
export -f artifactory.retrieveArtifact

#----------------------------------------------------------------------------------------------
function artifactory.saveCBF()
{
    local tmpDir="${1:-$(mktemp -d)}"

    [ -d container_build_framework ] || trap.die 'No framework directory located'
    [ -e container_build_framework/.git ] || trap.die 'CBF is not a git directory'

    local filename="$(cd container_build_framework; git describe --tags --dirty)"
    [[ "$filename" == *-dirty* ]] && trap.die 'Please commit CBF directory prior to uploading to Artifactory'
    local filetime="$(cd container_build_framework; git log -1 --format="%ci")"

    local tarfile="${tmpDir}/${filename}.tar.gz"

    # create tgz file with fixed timestamp (so we get consistent sha256)
    tar --exclude='C?F.properties' --create --mtime "$filetime" container_build_framework | gzip -n > "$tarfile"

    artifactory.uploadFile "container_build_framework/${filename}.tar.gz"  "$tarfile" >&2
}
export -f artifactory.saveCBF

#----------------------------------------------------------------------------------------------
# This function will search for artifacts using AQL  (Artifactor Query Language) - json query save in file
# eg:
# artifactoryPropertySearch aqlFile
function artifactory.search()
{
    local -r aql_file=${1:?"ERROR: no aql_file provided to ${FUNCNAME[0]}()!"}
    artifactory.POST "$(artifactory.REST_API)/search/aql" -T "$aql_file"
}
export -f artifactory.search

#----------------------------------------------------------------------------------------------
function artifactory.secretsFile()
{
    echo "${_ARTIFACTORY_SECRETS_FILE:=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/properties/secret.properties}"
}
export -f artifactory.secretsFile

#----------------------------------------------------------------------------------------------
function artifactory.signArtifact()
{
    local filename=${$1:-}
    local signingServer=${2:-10.244.53.86}

    local path="."
    [ "$filename" != */* ] || path="${filename%/*}"
    local fileName="$(basename "$filename")"

    if [ ! -f "$path/$fileName" ]; then
        term.log "local file to sign $path/$fileName does not exist!" 'error'
        return 1
    fi

    local idFile="$(artifactory.ID_FILE)"

    echo "Downloading $idFile from Artifactory..."
    artifactory.GET "$(artifactory.SIGNID_URL)" --output "$idFile"

    if [ ! -f "$idFile" ]; then
        term.log "$idFile does not exist!" 'error'
        return 1
    fi
    chmod 600 "$idFile"

    # Detach sign the artifact
    local signId="$(artifactory.SIGNID)"
    "{${DEVOPS_TOP}/pycyclonedevops/CodeSigning/codesign.py" sign \
                      --server="$signingServer"                   \
                      --signid="$signId"                          \
                      --signtype=gpg                              \
                      --signmode=production                       \
                      --signproduct="$(artifactory.GPG_CONFIG)"   \
                      --signxsign                                 \
                      --user=transport "$path/$fileName"          \
                      --signaction detachsign                     \
                      --signuser "$(artifactory.SIGNUSER)"        \
                      --signparams "$(artifactory.SIGNPARAMS)"    \
                      --idfile="$idFile" &> /dev/null


    mv "$signId"_* "$path"
    if [ ! -e "${path}/${signId}_$fileName".signed ]; then
        echo "Failed to detach sign <$path/$fileName> with master key"
        rm -f "${path}/${signId}_$fileName"*
        return 1
    fi

    mv "$path/$fileName" "$path/$fileName".sig
    mv "${path}/${signId}_$fileName" "$path/$fileName"
    rm -f "${path}/${signId}_$fileName"*
    return 0
}
export -f artifactory.signArtifact

#----------------------------------------------------------------------------------------------
function artifactory.uploadFile()
{
    local -r target="${1:?}"
    local -r file="${2:?}"

    local md5Value="$(md5sum "$file")"
    md5Value="${md5Value:0:32}"
    local sha1Value="$(sha1sum "$file")"
    sha1Value="${sha1Value:0:40}"

    local url="$target"
    [[ "$url" = https://* ]] || [[ "$url" = http://* ]] || url="$(artifactory.URL)/cyclone-devops-mw/cyclone-devops/$target"

    echo "INFO: Uploading $file to $url"
    artifactory.PUT --header "X-Checksum-Md5: $md5Value" --header "X-Checksum-Sha1: $sha1Value" --upload-file "$file" "$url"
}
export -f artifactory.uploadFile

#----------------------------------------------------------------------------------------------
function artifactory.ARTIFACTORY_PROD()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.ARTIFACTORY_PROD

#----------------------------------------------------------------------------------------------
function artifactory.ARTIFACTORY_TEST()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.ARTIFACTORY_TEST

#----------------------------------------------------------------------------------------------
function artifactory.ID_FILE()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.ID_FILE

#----------------------------------------------------------------------------------------------
function artifactory.GPG_CONFIG()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.GPG_CONFIG

#----------------------------------------------------------------------------------------------
function artifactory.GPG_RECIPIENT()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.GPG_RECIPIENT

#----------------------------------------------------------------------------------------------
function artifactory.REST_API()
{
    echo "${_ARTIFACTORY_REST_API:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )")}"
}
export -f artifactory.REST_API

#----------------------------------------------------------------------------------------------
function artifactory.ROUSER()
{
    echo "${_ARTIFACTORY_ROUSER:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )")}"
}
export -f artifactory.ROUSER

#----------------------------------------------------------------------------------------------
function artifactory.SERVER()
{
    echo "${_ARTIFACTORY_SERVER:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )")}"
}
export -f artifactory.SERVER

#----------------------------------------------------------------------------------------------
function artifactory.SIGNID()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.SIGNID

#----------------------------------------------------------------------------------------------
function artifactory.SIGNID_URL()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.SIGNID_URL

#----------------------------------------------------------------------------------------------
function artifactory.SIGNPARAMS()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.SIGNPARAMS

#----------------------------------------------------------------------------------------------
function artifactory.SIGNUSER()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )"
}
export -f artifactory.SIGNUSER

#----------------------------------------------------------------------------------------------
function artifactory.URL()
{
    echo "${_ARTIFACTORY_URL:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )")}"
}
export -f artifactory.URL

#----------------------------------------------------------------------------------------------
function artifactory.USER()
{
    echo "${_ARTIFACTORY_USER:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )")}"
}
export -f artifactory.USER

#----------------------------------------------------------------------------------------------
function artifactory.USERID()
{
    echo "${_ARTIFACTORY_USERID:=$(lib.getProperty "${FUNCNAME[0]##*.}" "$( artifactory.propertiesFile )")}"
}
export -f artifactory.USERID
