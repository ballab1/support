#!/bin/bash

#############################################################################
#
#   versions.bashlib; basic functions to access 'versions' repo
#
#############################################################################

#----------------------------------------------------------------------------------------------
function versions.COMMIT()
{
    lib.getProperty "${FUNCNAME[0]##*.}" "${1:-$VERSIONS_INFO_FILE}"
}
export -f versions.COMMIT

#----------------------------------------------------------------------------------------------
function versions.set_VERSIONS_INFO_FILE()
{
    : ${VERSIONS_INFO_FILE:=$(readlink -f ${1:?})}
    export VERSIONS_INFO_FILE
    export _VERSIONS_DIRECTORY="$(versions.DIRECTORY "$VERSIONS_INFO_FILE")"
    export _VERSIONS_REPO="$(versions.REPO "$VERSIONS_INFO_FILE")"
}
export -f versions.set_VERSIONS_INFO_FILE

#----------------------------------------------------------------------------------------------
function versions.data()
{
    versions.set_VERSIONS_INFO_FILE ${1:?}
    local commit=${2:-}

    local -r versions_dir="$(versions.DIRECTORY)"

    if [ ! -d "$versions_dir" ]; then
#        mkdir -p "$versions_dir" || trap.die 'no version information available'
        git clone --quiet "$(versions.REPO)" "$versions_dir"
    fi

    # ensure version info is up-to-date
    if [ "${commit,,:-}" != 'latest' ]; then
        ( cd "$versions_dir"; git checkout --quiet "$(versions.COMMIT)" )
        return 0
    fi

    commit=$(cd "$versions_dir"; git checkout master &>/dev/null; git pull --quiet &>/dev/null; git rev-parse HEAD)
    if [ "$commit" != $(versions.COMMIT) ]; then
        lib.updatePropertyFile 'COMMIT' "$commit" "$VERSIONS_INFO_FILE" 'force'
    fi
}
export -f versions.data

#----------------------------------------------------------------------------------------------
function versions.DIRECTORY()
{
    echo ${_VERSIONS_DIRECTORY:=$(readlink -f $(versions.DIR "${1:-$VERSIONS_INFO_FILE}"))}
}
export -f versions.DIRECTORY

#----------------------------------------------------------------------------------------------
function versions.DIR()
{
    local dir=$(lib.getProperty "${FUNCNAME[0]##*.}" "${1:-$VERSIONS_INFO_FILE}")
    [ "${dir:0:1}" = '/' ] || dir="$(dirname "${1:-$VERSIONS_INFO_FILE}")/$dir"
    echo $dir
}
export -f versions.DIR

#----------------------------------------------------------------------------------------------
function versions.FILE()
{
    readlink -f "$(versions.DIRECTORY ${2:-$VERSIONS_INFO_FILE})/${1:?}"
}
export -f versions.FILE

#----------------------------------------------------------------------------------------------
function versions.get()
{
    local -r containerOS=${1:?}
    local -r fn=${2:?}
    local -r version_info=${3:-$VERSIONS_INFO_FILE}

    # export data for requested OS
    local -r versions="$(versions.FILE "$containerOS" "$version_info")"
    [ -e "$versions" ] || trap.die "Unrecognized CONTAINER_OS: $containerOS"

    while read -r line; do
        eval "$fn $line"
    done < <(grep -E "^\s*([^#]+=[^#]+)\s*" "$versions" | sed -r -e 's|^\s*([^#]+=[^#]+)\s*|\1|')
}
export -f versions.get

#----------------------------------------------------------------------------------------------
function versions.REPO()
{
    echo ${_VERSIONS_REPO:=$(lib.getProperty "${FUNCNAME[0]##*.}" "${1:-$VERSIONS_INFO_FILE}")}
}
export -f versions.REPO

#----------------------------------------------------------------------------------------------
