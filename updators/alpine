#!/usr/bin/bash

OS_VERSION='3.18.3'


#--------------------------------------------------------------------------------
function main() {

    local file old_version sedCmd

    local -r rootDir="$(git rev-parse --show-toplevel)"
    cd "$rootDir" ||:

    local -r versionFile='versions/alpine'

    # get the old OS_VERSION
    old_version='$OS_VERSION'
    while [[ "$old_version" =~ \S ]]; do
        old_version="$(grep -E "^${old_version:1}=" "$versionFile" | cut -d '=' -f 2)"
    done

    if [ "$old_version" != "$OS_VERSION" ]; then
        # update versions file
        sedCmd="$(printf 's|OS_VERSION:-%s|OS_VERSION:-%s|g' "$old_version" "$OS_VERSION")"
        sed -i "$sedCmd" "$versionFile"

        # update & commit the changes
        updateFiles "$old_version" "$OS_VERSION"
    fi
    commitChanges "$OS_VERSION"
    git add -A; git commit -m "update alpine to ${OS_VERSION}";git push
}

#--------------------------------------------------------------------------------
function commitChanges() {

    local new_version="${1:-?}"

    # commit the changes
    local dir
    while read -r dir;do
      echo
      pushd "$dir"
      [ "$(git status --porcelain)" ] && (git add -A; git commit -m "update alpine to ${new_version}";git push)
      popd >/dev/null
    done < <(git submodule status --recursive | awk '{print $2}')
}

#--------------------------------------------------------------------------------
function updateFiles() {

    local old_version="${1:-?}"
    local new_version="${2:-?}"

    # update OS_VERSION in all files
    local file sedCmd
    while read -r file; do
      sedCmd="$(printf 's|OS_VERSION:-%s|OS_VERSION:-%s|g' "$old_version" "$new_version")"
      sed -i "$sedCmd" "$file"
    done < <(grep -r -E "OS_VERSION:-${old_version}" * |cut -d ":" -f 1|awk '{split($0,arr,"/"); if (arr[2] == "Dockerfile" || arr[2] == "docker-compose.yml") print $0}')
}

#--------------------------------------------------------------------------------

main "$@"
