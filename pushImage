#!/bin/bash

declare OUTPUT_FILE

#----------------------------------------------------------------------------------------------
function pushImage.usage()
{
    local -i exit_status=${1:-1}

    cat >&2 << EOF
Usage:
    $progname [ -h|--help ]
              [ -f|--fingerprint ]
               <image> | <image> | <image>

    Common options:
        -h --help              Display a basic set of usage instructions
        -f --fingerprint       If specified, the CBF fingerprint is also pushed to the docker repository

    Push one or more docker images to the registry. 
    If images contain a CBF fingerprint, both the image and the image tagged with the fingerprint are pushed

EOF
    exit "$exit_status"
}

#----------------------------------------------------------------------------------------------
function pushImage.cmdLineArgs()
{
    local usage='pushImage.usage'

    # Parse command-line options into above variable
    local -r progname="$( basename "${BASH_SOURCE[0]}" )"
    local -r options=$(getopt --longoptions "help,Help,HELP,fingerprint" --options "Hhf" --name "$progname" -- "$@") || "$usage" $?
    eval set -- "$options"

    local -A opts=( ['fingerprint']=0 )
    while true; do
        case "${1:-}" in
            -h|--h|--help|-help)  "$usage" 1;;
            -H|--H|--HELP|-HELP)  "$usage" 1;;
            --Help|-Help)         "$usage" 1;;
            -f|--fingerprint)     opts['fingerprint']=1;shift;;
            --)                 shift; break;;
        esac
    done
    
    appenv.results "$@"
}

#----------------------------------------------------------------------------------------------
function pushImage.main()
{
    local -A opts
    eval opts=( $1 )
    readonly opts
    shift

    registry.push "${opts['fingerprint']:-}" "$@"
}

#----------------------------------------------------------------------------------------------

declare -i status
declare -a args
declare fn=registry.push

declare loader="$(dirname "${BASH_SOURCE[0]}")/libs/appenv.bashlib"
if [ ! -e "$loader" ]; then
    echo 'Unable to load libraries'
    exit 1
fi
source "$loader"
appenv.loader "$fn"

args=( $( pushImage.cmdLineArgs "$@" ) ) && status=$? || status=$?
[ $status -eq 0 ] && pushImage.main "${args[@]}"
